---
# yamllint disable-line-length
version: "2.1"
# This is applicationâ€™s services configuration for development purposes only.

services:
  db:
    image: mysql:8.0.36-bullseye
    security_opt:
      - seccomp:unconfined
    command: >-
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_polish_ci
      --max_allowed_packet=1024M
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "password"
      MYSQL_DATABASE: feder # feder_copy
    volumes:
      - mysql-data:/var/lib/mysql

  gulp:
    build:
      context: .
      dockerfile: .contrib/docker/Dockerfile.gulp
    ports:
      - "35729:35729"
    volumes:
      - .:/app

  web:
    build: &webBuild
      context: .
      dockerfile: .contrib/docker/Dockerfile.web
      # args:
      # PYTHON_VERSION: '${PYTHON_VERSION:-3.6.9}' # Match to production environment
      # PYTHON_VERSION: '${PYTHON_VERSION:-3.10.6}' # Match to staging environment
      # DJANGO_VERSION: '${DJANGO_VERSION:-==3.1.5}'
    volumes: &webVolumes
      - .:/code
    environment: &webEnvironment
      DATABASE_URL: mysql://root:password@db/feder  # feder3_copy_mb4
      MEDIA_ROOT_ENV: "media_prod"
      DJANGO_EMAIL_BACKEND: "django.core.mail.backends.smtp.EmailBackend"
      DJANGO_EMAIL_HOST: "maildump"
      DJANGO_EMAIL_PORT: "1025"
      DJANGO_EMAIL_USE_TLS: "False"
      DJANGO_EMAIL_HOST_PASSWORD: ""
      DJANGO_EMAIL_HOST_USER: "feder_dev@dev.fedrowanie.siecobywatelska.pl"
      DJANGO_EMAIL_SUBJECT_PREFIX: "[feder_dev] "
      DJANGO_EMAIL_NOTIFICATION: "no-reply@siecobywatelska.pl"
      DJANGO_DEFAULT_FROM_EMAIL: "feder_dev <noreply@dev.fedrowanie.siecobywatelska.pl>"
      LETTER_RECEIVE_SECRET: "dev_letter_rec_very_secret"
      APP_MODE: "DEV"
      ROSETTA_AZURE_CLIENT_SECRET: ${ROSETTA_AZURE_CLIENT_SECRET}
      MY_INTERNAL_IP: ${MY_INTERNAL_IP}
      VIRUSTOTAL_API_KEY: ""
      ATTACHMENTSCANNER_API_KEY: ""
      ATTACHMENTSCANNER_API_URL: ""
      METADEFENDER_API_KEY: ${METADEFENDER_API_KEY}
      FILE_TO_TEXT_URL: ${FILE_TO_TEXT_URL}
      FILE_TO_TEXT_TOKEN: ${FILE_TO_TEXT_TOKEN}
      EMAILLABS_APP_KEY: ${EMAILLABS_APP_KEY}
      EMAILLABS_SECRET_KEY: ${EMAILLABS_SECRET_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      AZURE_ENDPOINT: ${OPENAI_API_BASE}
      OPENAI_API_ENGINE_35: "gpt-35-turbo-16k"
      OPENAI_API_ENGINE_4: "gpt-4o"
      OPENAI_API_TYPE: "azure"
      OPENAI_API_ENGINE_35_MAX_TOKENS: 16000
      OPENAI_API_ENGINE_4_MAX_TOKENS: 100000
      OPENAI_API_TEMPERATURE: 0.0
      OPENAI_API_VERSION: "2024-05-01-preview"
    ports:
      - "8000:8000"
    # Following allows to execute `docker attach feder_web_1`
    # necessary when using ipdb in development:
    stdin_open: true
    tty: true

  # *
  # * for debugging purposes it is better to run worker in VScode launch on web container
  # *
  #  worker:
  #    command: python manage.py process_tasks
  #    build: *webBuild
  #    volumes: *webVolumes
  #    environment: *webEnvironment


  maildump:
    build:
      context: .
      dockerfile: .contrib/docker/Dockerfile.maildump

    volumes:
      - maildump_data:/data
    ports:
      - "1080:1080"
      - "1025:1025"

  #
  # To use email reception uncomment below section and fill in your dev IMAP
  # mailbox secrets in imap-to-webhook-url.env
  #
  # imap-to-webhook-feder:
  #   image: quay.io/watchdogpolska/imap-to-webhook:latest
  #   environment:
  #     WEBHOOK_URL: "http://web:8000/listy/webhook?secret=dev_letter_rec_very_secret"
  #     SENTRY_DSN: ""
  #     SENTRY_ENVIRONMENT: "feder-dev"
  #     COMPRESS_EML: "True"
  #   env_file:
  #     - secrets_imap-to-webhook-url.env:optional

volumes:
  mysql-data:
  maildump_data:
